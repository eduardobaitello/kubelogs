#!/usr/bin/env bash

set -eu

VERSION="0.3.0"

default_namespace="${KUBELOGS_NAMESPACE:-}"
default_output_dir="${KUBELOGS_OUTPUT_DIR:-}"

NAMESPACE="${default_namespace}"
OUTPUT_DIR="${default_output_dir}"

USAGE="kubelogs [-h] [-n] [-o] [-v] -- dump kubernetes container logs to local files
Options:
    -h, --help           Show this help text
    -n, --namespace      Specify a kubernetes namespace to skip the interactive selection
    -o, --output-dir     Specify a output directory to skip the interactive selection
    -v, --version        Prints the kubelogs version"

# Get namespace list from current context
function select_namespace() {
  NAMESPACE_LIST=(`kubectl get namespaces --output=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | awk 'NF {print $1; print $1}'`)
  if [[ -z ${NAMESPACE_LIST[@]} ]]; then echo "No namespaces found for context $(kubectl config current-context)!" >&2; exit 1; fi
  NAMESPACE=$(whiptail --noitem --title "Select a namespace" --menu "choose" 16 78 10 "${NAMESPACE_LIST[@]}" 3>&1 1>&2 2>&3)
}

# Get pod list from selected namespace
function select_pods() {
  POD_LIST=(`kubectl get pods --namespace=${NAMESPACE} --output=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | awk 'NF {print $1; print $1}'`)
  if [[ -z ${POD_LIST[@]} ]]; then echo "No pods found for namespace ${NAMESPACE}!" >&2; exit 1; fi
  PODS=(`whiptail --noitem --separate-output --title "Select pods from namespace ${NAMESPACE}" --checklist "choose" 16 78 10 "${POD_LIST[@]}" 3>&1 1>&2 2>&3`)
}

# Validate output directory
function validate_output_dir() {
  if [[ -d $OUTPUT_DIR ]] && [[ -w $OUTPUT_DIR ]]; then
    return 0
  else
    return 1
  fi
}

# Select output directory
function select_output_dir() {
  OUTPUT_DIR=$(whiptail --inputbox "Enter a local directory for output file(s):" 8 78 --title "Directory" 3>&1 1>&2 2>&3)
  until validate_output_dir
  do
    whiptail --title "Output directory error" --yesno "Invalid directory or insuficient permissions! Try again?" 8 78
    OUTPUT_DIR=$(whiptail --inputbox "Enter a local directory for output file(s):" 8 78 --title "Directory" 3>&1 1>&2 2>&3)
  done
}

# Get container logs from NAMESPACE/PODS
function get_container_logs() {

    #TIMESTAMP="$(date +"%Y%m%d_%H%M%S")"
    for pod in "${PODS[@]}"
    do
      CONTAINERS=(`kubectl get pods --namespace=${NAMESPACE} ${pod} --output=jsonpath='{.spec.containers[*].name}'`)
      for container in "${CONTAINERS[@]}"
      do
        set +eu
        echo "Getting ${pod}/${container} logs..."
        kubectl logs --timestamps --namespace=${NAMESPACE} ${pod} --container=${container} >> "$OUTPUT_DIR/${pod}_${container}.log" || { echo "Error while getting ${pod}/${container} logs!" >&2; }
        set -eu
      done
    done
}

# Parameters parsing
if [ "$#" -ne 0 ]; then
  while [ "$#" -gt 0 ]
  do
    case "$1" in
    -h|--help)
          echo "$USAGE"
          exit 0
          ;;
    -v|--version)
          echo "$VERSION"
          exit 0
          ;;
    -n|--namespace)
          if [ -z "$2" ]; then
            select_namespace # Call select_namespace if parameter --namespace is empty
          else
            NAMESPACE="$2"
          fi
          ;;
    -o|--output-dir)
          if [ -z "$2" ]; then
            echo "ERROR: --output-dir cannot be empty" >&2
            exit 1
          else
            OUTPUT_DIR="$2"
            validate_output_dir || { echo "ERROR: Invalid output directory or insuficient permissions!" >&2; exit 1; }
          fi
          ;;
    --)
          break
          ;;
    -*)
          echo "Invalid option '$1'. Use --help to see the valid options" >&2
          exit 1
          ;;
    # an option argument, continue
    *)  ;;
    esac
    shift
  done
fi

# Call select_namespace function if $NAMESPACE is empty
if [[ -z "$NAMESPACE" ]]; then select_namespace; fi

# Call select_pod function
select_pods

# Call output_dir functions
if [[ -z "$OUTPUT_DIR" ]]; then select_output_dir; fi

# Call get_container_logs function
get_container_logs
